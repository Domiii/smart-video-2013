//opencv
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>


#include "SmartVideo.h"

using namespace cv;
using namespace std;
using namespace SmartVideo;

//global variables
Mat frame; //current frame
Mat fgMaskMOG; //fg mask generated by MOG method
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard;

//function declarations
void help();
void processVideo(const string& videoFilename);
void processImages(const ClipEntry& clipEntry);

SmartVideoConfig Config;

int main(int argc, char* argv[])
{
	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG");
	namedWindow("FG Mask MOG 2");

	//create Background Subtractor objects
	pMOG= new BackgroundSubtractorMOG(); //MOG approach
	pMOG2 = new BackgroundSubtractorMOG2(); //MOG2 approach
    
    // setup config
    Config.CfgFolder = "../cfg/";
    Config.CfgFile = "config.json";

    if (!Config.InitializeConfig() || Config.ClipEntries.size() == 0)
    {
        cerr << "ERROR: Invalid clip list file - " << Config.ClipListFile;
        exit(-1);
    }

    ClipEntry firstClip = Config.ClipEntries[0];

    // single video file
    //processVideo(videoFileName);

    // video represented as a sequence of image files
    processImages(firstClip);

	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

// TODO: Fix this
/// Demonstration of OpenCV's background subtraction and basic video viewer
void processVideo(const string& videoFilename) {
	//create the capture object
	VideoCapture capture(videoFilename);
	if(!capture.isOpened()){
		//error in opening the video input
		cerr << "Unable to open video file: " << videoFilename << endl;
		exit(EXIT_FAILURE);
	}
	//read input data. ESC or 'q' for quitting
	while( (char)keyboard != 'q' && (char)keyboard != 27 ){
		//read the current frame
		if(!capture.read(frame)) {
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
		//update the background model
		pMOG->operator()(frame, fgMaskMOG);
		pMOG2->operator()(frame, fgMaskMOG2);

		//get the frame number and write it on the current frame
		stringstream ss;
		rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
			cv::Scalar(255,255,255), -1);
		ss << capture.get(CV_CAP_PROP_POS_FRAMES);
		string frameNumberString = ss.str();
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG", fgMaskMOG);
		imshow("FG Mask MOG 2", fgMaskMOG2);

		//get the input from the keyboard
		keyboard = waitKey( 30 );
	}
	//delete capture object
	capture.release();
}

/// Demonstration of OpenCV's background subtraction and basic video viewer
void processImages(const ClipEntry& clipEntry) 
{
    auto fileNames = ReadLines(Config.CfgFolder + clipEntry.ClipFile);
    string folder = Config.CfgFolder + Config.DataFolder + "/" + clipEntry.BaseFolder;

    // iterate over all files:
    int iFrameNumber = clipEntry.StartFrame;
    for_each(fileNames.begin() + clipEntry.StartFrame, fileNames.end(), [&](const string& fname) {
        string fpath = folder + "/" + fname;
	    frame = imread(fpath);
        if(!frame.data){

            //error in opening the first image
            cerr << "Unable to open image frame: " << fpath << endl;
            exit(EXIT_FAILURE);
        } 

        //update the background model
		pMOG->operator()(frame, fgMaskMOG);
		pMOG2->operator()(frame, fgMaskMOG2);
        
        // display frame number in viewer
        const Scalar black(255,255,255);
        const Scalar white(0,0,0);
        
        // clear text area
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20), black, -1);

        // draw frame number
        string frameNumberString = std::to_string(iFrameNumber) + " / " + std::to_string(fileNames.size());
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15), FONT_HERSHEY_SIMPLEX, 0.5 , white);

		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG", fgMaskMOG);
		imshow("FG Mask MOG 2", fgMaskMOG2);

        waitKey(10);        // TODO: Add a way to control playback FPS?
        ++iFrameNumber;
    });
}